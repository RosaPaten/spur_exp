import sage.combinat.permutation as permutation

###generates flagged Jacobi-Trudi matrix
Sym = SymmetricFunctions(QQ)
H = Sym.homogeneous()
R=PolynomialRing(QQ, 3,'x')
x=R.gens()
    
def f(l,m,b,i,j):
  if l[i]-l[j]-i+j>=0:
    if b[i]>1:
      return H[l[i]-m[j]-i+j].expand(b[i])
    else:
      return x[0]^(l[i]-m[j]-i+j)
  else:
    return 0

def A(l,m,b):
  N=len(l)
  A=matrix(N,N,lambda i, j: f(l,m,b,i,j))
  return A

###given w,v\in Sym(n), computes f_w(v)
H=HeckeAlgebraSymmetricGroupT(QQ,3,1)
S=SymmmetricGroup(3)

#iterates through red, computes element prod (t_i-1) in the group algebra
#then iterates through product to find coefficient on T_w
#input w,v both as permutations 
def f(w,v):
  red=v.reduced_word()
  prod=1
  for i in red:
    prod=(H.t(i)-1)*prod
  p=permutation.to_standard(w)
  return prod.coefficient(p)



    
  
  
  
  
  
  
