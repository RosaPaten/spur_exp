##############################Generates Flagged Schur Polynomials
Sym = SymmetricFunctions(QQ)
H = Sym.homogeneous()
R=PolynomialRing(QQ, 3,'x')
x=R.gens()
    
def f(l,m,b,i,j):
  if l[i]-i+j>=0:
    if b[i]>1:
      return H[l[i]-m[j]-i+j].expand(b[i])
    else:
      return x[0]^(l[i]-m[j]-i+j)
  else:
    return 0

def s(l,m,b):
  m=len(l)
  A=matrix(m,m,lambda i, j: f(l,m,b,i,j))
  return A.determinant()

def aver(l,m):
  n=[]
  L=len(l)
  for i in range(L):
    n.append((l[i]+m[i])/2)
  return n

#writes difference in key basis
k = KeyPolynomials(R, Compositions())

def check(l_1,m_1,l_2,m_2,b):
  a_1=aver(l_1,l_2)
  a_2=aver(m_1,m_2)
  poly=s(a_1,a_2,b)^2-s(l_1,m_1,b)*s(l_2,m_2,b)
  poly=k.from_polynomial(poly)
  coef=poly.coefficients()
  for i in coef:
    if i<0:
      return False
  return True


